<title>Column - Parsing Data</title>

<scripts>
<script>
const PRODUCT_NAMES = [
  'Apple', 'Orange', 'Berry', 'Grape', 'Peach', 'Cherry',
  'Chocolate', 'Vanilla', 'Honey', 'Caramel', 'Coconut', 'Almond', 'Hazelnut',
  'Coffee', 'Tea', 'Spice', 'Herb', 'Mint'
];

const PRODUCT_TYPES = [
  'Juice', 'Syrup', 'Sauce', 'Powder', 'Extract', 'Oil', 'Cream', 'Cake',
  'Cookie', 'Candy', 'Drink', 'Smoothie', 'Soup', 'Spread', 'Jam',
  'Butter', 'Bars', 'Mix'
];

function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomDecimal(min, max, decimals = 2) {
  const random = Math.random() * (max - min) + min;
  return Math.round(random * Math.pow(10, decimals)) / Math.pow(10, decimals);
}

function generateProductName() {
  const baseName = PRODUCT_NAMES[Math.floor(Math.random() * PRODUCT_NAMES.length)];
  const productType = PRODUCT_TYPES[Math.floor(Math.random() * PRODUCT_TYPES.length)];
  return `${baseName} ${productType}`;
}

function generateSingleProduct(productId) {
  return {
    productId: productId,
    productName: generateProductName(),
    unitPrice: randomDecimal(10, 99),
    unitsInStock: randomInt(0, 500),
    unitsOnOrder: randomInt(0, 500)
  };
}

function generateRandomProducts(n) {
  const products = [];
  
  for (let i = 1; i <= n; i++) {
    products.push(generateSingleProduct(i));
  }
  
  return products;
}

const productsList = generateRandomProducts(5);
</script>
</scripts>


<chart>
<options>
chart: {
  type: 'bar',
  height: 350
},
plotOptions: {
  bar: {
    horizontal: false,
    borderRadius: 0,
  },
},
dataLabels: {
  enabled: false
},
stroke: {
  show: true,
  width: 2,
},
fill: {
  opacity: 1
},
yaxis: [{
  seriesName: 'Price',
  min: 0,
  title: {
    text: "Price"
  },
  labels: {
    formatter: (val) => {
      return "$" + val.toFixed(2)
    }
  }
}, {
  opposite: true,
  seriesName: 'Stock',
  title: {
    text: "Stock"
  },
  labels: {
    formatter: (val) => {
      return val
    }
  }
}]
</options>

<series>
[{
  name: 'Price',
  data: productsList,
  parsing: {
    x: "productName",
    y: "unitPrice"
  }
}, {
  name: 'Stock',
  data: productsList,
  parsing: {
    x: "productName",
    y: "unitsInStock"
  }
}]
</series>
</chart>